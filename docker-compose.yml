services:
  postgres:
    image: postgres:15.3-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # env_file:
    #   - .env 
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  django:
    build:
      context: ./portfolio_be
      dockerfile: Dockerfile
    # env_file:
    #   - .env
    environment:
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DJANGO_SETTINGS_MODULE: "portfolio_be.settings"
    # ports:
    #   - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    # No port mapping here; Nginx will proxy traffic

  vue:
    build:
      context: ./portfolio_fe
      dockerfile: Dockerfile
    # env_file:
    #   - .env
    # command: npm run serve -- --host 0.0.0.0
    networks:
      - backend
    # Expose the port on the container only
    expose:
      - "3000"
    volumes:
      - ./portfolio_fe/dist:/app/dist

  nginx:
    build:
      context: ./portfolio_fe
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/certs:/etc/letsencrypt
      - ./nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt:ro
      # Optional: for ACME challenges during renewal
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - django
      - vue
    networks:
      - backend

  certbot:
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./certbot/logs:/var/log/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - backend
    # For automatic renewal
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot --webroot-path /var/www/certbot; sleep 12h & wait $${!}; done;'"
    # Or, if you only want to manually renew:
    # command: certbot renew --webroot --webroot-path /var/www/certbot
    # Or, to manually request a new cert (only if needed):
    # command: certbot certonly --webroot --webroot-path /var/www/certbot -d yourdomain.com --email your@email.com --agree-tos --rsa-key-size 4096

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge

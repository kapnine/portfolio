services:
  postgres:
    image: postgis/postgis:14-3.1-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env 
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  django:
    build:
      context: ./portfolio_be
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
    command: >
      /wait-for-it.sh postgres:5432 -- sh -c "
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:8000"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - backend

  vue:
    build:
      context: ./portfolio_fe
      dockerfile: Dockerfile
    env_file:
      - .env
    command: npm run serve -- --host 0.0.0.0
    ports:
      - "3000:3000"
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend: